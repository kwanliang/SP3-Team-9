#version 330 core

// Interpolated values from the vertex shaders
in vec3 vertexPosition_cameraspace;
in vec3 fragmentColor;
in vec3 vertexNormal_cameraspace;
in vec2 texCoord;
in vec2 blurVec;
in vec4 shadowCoord;

// Ouput data
out vec4 color;

struct Light {
	int type;
	vec3 position_cameraspace;
	vec3 color;
	float power;
	float kC;
	float kL;
	float kQ;
	vec3 spotDirection;
	float cosCutoff;
	float cosInner;
	float exponent;
};

struct Material {
	vec3 kAmbient;
	vec3 kDiffuse;
	vec3 kSpecular;
	float kShininess;
};

float getAttenuation(Light light, float distance) {
	if(light.type == 1)
		return 1;
	else
		return 1 / max(1, light.kC + light.kL * distance + light.kQ * distance * distance);
}

float getSpotlightEffect(Light light, vec3 lightDirection) {
	vec3 S = normalize(light.spotDirection);
	vec3 L = normalize(lightDirection);
	float cosDirection = dot(L, S);
	//return smoothstep(light.cosCutoff, light.cosInner, cosDirection);
	if(cosDirection < light.cosCutoff)
		return 0;
	else
		return 1; //pow(cosDirection, light.exponent);
}

struct FogParam
{
	vec3 color;			// Fog color
	float start;		// For linear fog
	float end;			// For linear fog
	float thickness;	// For fog thickness
	float density;		// For exponential fog
	int type;			// 0 = linear, 1 = exp, 2 = exp2
	int enabled;		// Toggle fog
};

struct BlendParam
{
	float blendFactor;	// Factor for blending
	int blendEnabled;	// Toggle blending
};

float getFogFactor(FogParam fog, float fogDistance)
{
	if(fog.enabled == 0)
		return 0.0;

	float factor = 0.0;
	if(fog.type == 0) 
		factor = (fog.end - fogDistance) / (fog.end - fog.start); 
	else if(fog.type == 1) 
		factor = exp(- fog.density * fogDistance); 
	else if(fog.type == 2) 
		factor = exp(- pow(fog.density * fogDistance, 2.0) ); 
       
	factor = clamp(fog.thickness, 0.0, 1.0) - clamp(factor, 0.0, 1.0); 
    
	return factor;
}

// Constant values
const int MAX_LIGHTS = 8;
const int MAX_TEXTURES = 8;

// Values that stay constant for the whole mesh.
uniform int lightEnabled;
uniform Light lights[MAX_LIGHTS];
uniform Material material;
uniform int numLights;
uniform int colorTextureEnabled[MAX_TEXTURES];
uniform sampler2D colorTexture[MAX_TEXTURES];
uniform int isGUI;
uniform vec3 textColor;
uniform FogParam fogParam;
uniform sampler2D shadowMap;
uniform BlendParam blendParam;

float getShadowEffect(float cosTheta)
{
	vec2 poissonDisk[16] = vec2[](
		vec2(0.6446329f, -0.728339f),
		vec2(0.4858856f, -0.03164566f),
		vec2(0.2312863f, -0.3893649f),
		vec2(0.9079283f, -0.4030423f),
		vec2(-0.2334235f, 0.1063533f),
		vec2(-0.5453237f, -0.4236213f),
		vec2(-0.1212863f, -0.7077723f),
		vec2(-0.82082f, 0.07091778f),
		vec2(0.253056f, -0.8763201f),
		vec2(-0.2436247f, 0.6360927f),
		vec2(-0.7647952f, 0.4730734f),
		vec2(0.2863124f, 0.6242559f),
		vec2(0.6890588f, 0.58001f),
		vec2(0.9412484f, 0.1755734f),
		vec2(0.07959916f, 0.9941541f),
		vec2(-0.9362882f, -0.3135264f)
	);

	float visibility = 1.0;
	float bias = 0.005;

	for(int i = 0; i < 16; ++i)
	{
		if(texture2D(shadowMap, shadowCoord.xy + poissonDisk[i] / 700.0).x < shadowCoord.z - bias) {
		visibility -= 0.0625f;
		}
	}

	return visibility;
}

void main(){
	if(lightEnabled > 0)
	{
		// Material properties
		vec4 materialColor = vec4(0, 0, 0, 1);
		
		int texCount = 0;
		
		if (blendParam.blendEnabled > 0)
		{
			materialColor = mix(texture2D( colorTexture[0], texCoord ), texture2D( colorTexture[1], texCoord ), clamp(blendParam.blendFactor, 0.1, 1.0));
		}
		else
		{
			for (int i = 0; i < MAX_TEXTURES; ++i)
			{
				if(colorTextureEnabled[i] > 0)
				{
					materialColor += texture2D( colorTexture[i], texCoord );
					++texCount;

				}		
			}
			if (texCount > 0)
			{
				materialColor = materialColor/texCount;
			}
			else
				materialColor = vec4( fragmentColor, 1 );
		}
	
		// Vectors
		vec3 eyeDirection_cameraspace = - vertexPosition_cameraspace;
		vec3 E = normalize(eyeDirection_cameraspace);
		vec3 N = normalize( vertexNormal_cameraspace );
		
		// Ambient : simulates indirect lighting
		color = materialColor * vec4(material.kAmbient, 1);
		
		for(int i = 0; i < numLights; ++i)
		{
			// Light direction
			float spotlightEffect = 1;
			vec3 lightDirection_cameraspace;
			if(lights[i].type == 1) {
				lightDirection_cameraspace = lights[i].position_cameraspace;
			}
			else if(lights[i].type == 2) {
				lightDirection_cameraspace = lights[i].position_cameraspace - vertexPosition_cameraspace;
				spotlightEffect = getSpotlightEffect(lights[i], lightDirection_cameraspace);
			}
			else {
				lightDirection_cameraspace = lights[i].position_cameraspace - vertexPosition_cameraspace;
			}
			// Distance to the light
			float distance = length( lightDirection_cameraspace );
			
			// Light attenuation
			float attenuationFactor = getAttenuation(lights[i], distance);

			vec3 L = normalize( lightDirection_cameraspace );
			float cosTheta = clamp( dot( N, L ), 0, 1 );
			
			vec3 R = reflect(-L, N);
			float cosAlpha = clamp( dot( E, R ), 0, 1 );
			
			float visibility =getShadowEffect(cosTheta);
			
			color +=
				// Diffuse : "color" of the object
				visibility * materialColor * vec4(material.kDiffuse, 1) * vec4(lights[i].color, 1) * lights[i].power * cosTheta * attenuationFactor * spotlightEffect +
				
				// Specular : reflective highlight, like a mirror
				visibility * vec4(material.kSpecular, 1) * vec4(lights[i].color, 1) * lights[i].power * pow(cosAlpha, material.kShininess) * attenuationFactor * spotlightEffect;

		}
	}
	else
	{
		if(colorTextureEnabled[0]> 0 && isGUI > 0)
		{
			color = texture2D( colorTexture[0], texCoord ) * vec4( textColor, 1 );
		}
		else
		{
			int texCount = 0;
		
			color = vec4(0, 0, 0, 0);
			for (int i = 0; i < MAX_TEXTURES; ++i)
			{
				if(colorTextureEnabled[i] > 0)
				{
					color += texture2D( colorTexture[i], texCoord );
					++texCount;
				}
			}
			if (texCount > 0)
			{
				color = color/texCount;
			}
			else
				color = vec4( fragmentColor, 1 );
		}
		
	}

	if (color.a < 0.1)
		discard;

	if(fogParam.enabled > 0 && isGUI == 0)
	{
		float fogDistance = abs(vertexPosition_cameraspace.z);
		if (fogDistance > fogParam.end)
			discard;
		float fogFactor = getFogFactor(fogParam, fogDistance);
		color = mix(color, vec4(fogParam.color, 1), fogFactor);
	}
}